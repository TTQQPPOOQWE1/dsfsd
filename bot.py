import logging
import asyncio
import re
import os
import json
from datetime import datetime, timedelta, timezone

from aiogram import Bot, Dispatcher
from aiogram.types import Message, ChatPermissions, ChatMemberAdministrator, ChatMemberOwner
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.client.bot import DefaultBotProperties

API_TOKEN = '8076308761:AAGRQ1txwjZnjsquWrpeVGEAb7TqkDKsim4'

logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

WARN_FILE = 'warns.json'

if os.path.exists(WARN_FILE):
    with open(WARN_FILE, 'r', encoding='utf-8') as f:
        user_warns = json.load(f)
        user_warns = {int(k): int(v) for k, v in user_warns.items()}
else:
    user_warns = {}

def save_warns():
    with open(WARN_FILE, 'w', encoding='utf-8') as f:
        json.dump(user_warns, f, ensure_ascii=False)

def build_user_link(name, user_id):
    return f'<a href="tg://user?id={user_id}">{name}</a>'

def parse_duration(text):
    text = text.strip().lower()
    units_map = {
        '–º–∏–Ω—É—Ç': 'minutes', '–º–∏–Ω': 'minutes', '–º': 'minutes',
        '—á–∞—Å': 'hours', '—á': 'hours',
        '–¥–µ–Ω—å': 'days', '–¥': 'days',
        '–Ω–µ–¥–µ–ª—è': 'weeks', '–Ω': 'weeks',
        '–º–µ—Å—è—Ü': 'days'  # —Å—á–∏—Ç–∞–µ—Ç—Å—è –∫–∞–∫ 30 –¥–Ω–µ–π
    }
    match = re.match(r'(\d+)\s*(\D+)', text)
    if not match:
        return None
    val, unit_raw = match.groups()
    val = int(val)
    for key in units_map:
        if unit_raw.startswith(key):
            unit = units_map[key]
            if '–º–µ—Å—è—Ü' in key:
                return timedelta(days=val * 30)
            return timedelta(**{unit: val})
    return None

async def can_restrict_member(chat_id: int, user_id: int):
    try:
        member = await bot.get_chat_member(chat_id, user_id)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ {user_id}: {e}")
        return False
    if isinstance(member, ChatMemberOwner):
        return False
    if isinstance(member, ChatMemberAdministrator) and member.can_restrict_members is False:
        return False
    return True

async def mute_user(chat_id, user_id, duration: timedelta, reason: str, user_name: str):
    until = datetime.now(timezone.utc) + duration
    try:
        await bot.restrict_chat_member(
            chat_id,
            user_id,
            permissions=ChatPermissions(can_send_messages=False),
            until_date=until
        )
        await bot.send_message(chat_id, f"üîá {build_user_link(user_name, user_id)} –∑–∞–º—É—á–µ–Ω –Ω–∞ {duration}.\n–ü—Ä–∏—á–∏–Ω–∞: {reason}", parse_mode=ParseMode.HTML)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –º—É—Ç–µ: {e}")

async def unmute_user(chat_id, user_id, user_name):
    try:
        await bot.restrict_chat_member(
            chat_id,
            user_id,
            permissions=ChatPermissions(
                can_send_messages=True,
                can_send_media_messages=True,
                can_send_polls=True,
                can_send_other_messages=True,
                can_add_web_page_previews=True,
                can_change_info=False,
                can_invite_users=True,
                can_pin_messages=False,
            ),
            until_date=None
        )
        await bot.send_message(chat_id, f"‚úÖ {build_user_link(user_name, user_id)} —Ä–∞–∑–º—É—á–µ–Ω.", parse_mode=ParseMode.HTML)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º—É—Ç–µ: {e}")

async def warn_user(chat_id, user_id, user_name, reason, message: Message):
    warns = user_warns.get(user_id, 0) + 1
    user_warns[user_id] = warns
    save_warns()
    await message.reply(f"‚ö†Ô∏è {build_user_link(user_name, user_id)} –ø–æ–ª—É—á–∏–ª –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ ‚Ññ{warns}.\n–ü—Ä–∏—á–∏–Ω–∞: {reason}", parse_mode=ParseMode.HTML)

USER_MESSAGE_HISTORY = {}
SPAM_LIMIT = 10
SPAM_TIME_SECONDS = 30

RACIAL_SLURS = [
    r"\b–Ω–µ–≥—Ä(—ã|–∞|–æ–≤|–µ|–æ–º)?\b",
    r"–ø–∏–¥–æ—Ä–∞—Å(—ã|–∞|–æ–≤|–µ|–æ–º)?",
    r"—á–º–æ",
    r"—à–∞–ª–∞–≤–∞",
    r"—à–ª—é—Ö–∞",
    r"–¥–∏–±–∏–ª",
    r"–¥–æ–ª–±–æ—ë–±",
    r"–¥–∞—É–Ω",
    r"—Ç–≤–∞—Ä—å –µ–±–∞–Ω–∞—è",
    r"–ø–∏–∑–¥–∞",
    r"—Ö—É–µ—Å–æ—Å",
    r"–≥–æ–≤–Ω–æ–µ–¥",
    r"–ø–∏–∑–¥–æ–±–æ–ª",
    r"–±–ª—è–¥–∏–Ω–∞",
    r"–ø–æ–ø—Ä–æ—à–∞–π–Ω–∏–∫",
    r"–ø–æ–ø—Ä–æ—à–∞–π–∫–∞",
    r"–µ–±–ª–∞–Ω",
    r"—Ö–æ—Ö–ª—ã"
]

PROHIBITED_WORDS = [
    "–ø—É—Ç–∏–Ω", "–∑–µ–ª–µ–Ω—Å–∫–∏–π", "—Ö–æ—Ö–æ–ª", "–∑–µ—Ç–Ω–∏–∫–∏",
    "–≥–æ–Ω–¥–æ–Ω—ã", "–ø–æ–ª–∏—Ç–∏–∫–∞", "–ø–µ–Ω–¥–æ—Å", "–æ–º–µ—Ä–∏–∫–∞", "–∞–º–µ—Ä–∏–∫–∞"
]

MUT_WORDS_RE = re.compile(r"\b(–ø–æ–¥–∞–π—Ç–µ|–¥–∞–π—Ç–µ|–¥–∞–π)\b", re.IGNORECASE)
URL_RE = re.compile(r"(https?://(?!((www\.)?(youtube\.com|youtu\.be|vk\.com|m\.vk\.com)))[\w.-]+\.\S+)", re.IGNORECASE)

RACIAL_SLURS_RE = re.compile("|".join(RACIAL_SLURS), re.IGNORECASE)
PROHIBITED_WORDS_RE = re.compile("|".join(PROHIBITED_WORDS), re.IGNORECASE)

@dp.message()
async def handle_message(message: Message):
    if not message.text or message.chat.type not in ['group', 'supergroup'] or message.from_user.is_bot:
        return

    user = message.from_user
    text = message.text
    text_lower = text.lower()

    # –ö–æ–º–∞–Ω–¥–∞ "–ø—Ä–∞–≤–∏–ª–∞"
    if text_lower == "–ø—Ä–∞–≤–∏–ª–∞":
        await message.reply(
            "üóì <b>–ü—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–∞:</b>\n\n"
            "üõë –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –±–∞–Ω / –º—É—Ç –∑–∞ —Å–ª–µ–¥—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:\n\n"
            "1. –ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–ª–∏ —Ñ–ª—É–¥ –±–µ–∑ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.\n"
            "2. –ü–æ–ø—Ä–æ—à–∞–π–Ω–∏—á–µ—Å—Ç–≤–æ.\n"
            "3. –û—Å–∫–æ—Ä–±–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.\n"
            "4. –ó–ª–æ—É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –∑–∞–≥–ª–∞–≤–Ω—ã–º–∏ –±—É–∫–≤–∞–º–∏.\n"
            "5. –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∫—Ä–∏–º–µ—Ä–æ–≤, —Å—Ç–æ–Ω–æ–≤ –∏–ª–∏ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –Ω–µ–ø—Ä–∏—Å—Ç–æ–π–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞.\n"
            "6. –¢–æ—Ä–≥–æ–≤–ª—è –±–µ–∑ —Å–æ–≥–ª–∞—Å–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.\n"
            "7. –†–µ–∫–ª–∞–º–∞ –≤ –ª—é–±–æ–º –≤–∏–¥–µ.\n"
            "8. –û—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è –≤ –∞–¥—Ä–µ—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.\n"
            "9. –ü—Ä–æ–≤–æ–∫–∞—Ü–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤.\n"
            "10. –ü–æ–ø—ã—Ç–∫–∞ —Ä–∞—Å–∫—Ä—ã—Ç—å –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.\n"
            "11. –û–±–≤–∏–Ω–µ–Ω–∏—è –≤ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–µ –±–µ–∑ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤.\n"
            "12. –û—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è –≤ –∞–¥—Ä–µ—Å —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.\n"
            "13. –ñ–∞–ª–æ–±—ã –Ω–∞ –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ—Å—Ç–æ–≤.\n"
            "14. –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π.\n"
            "15. –ú–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ –∏–ª–∏ —É—á–∞—Å—Ç–∏–µ –≤ —Å—Ö–µ–º–∞—Ö –æ–±–º–∞–Ω–∞.\n"
            "16. –û–±—Å—É–∂–¥–µ–Ω–∏–µ –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–µ–º.\n"
            "17. –ñ–µ—Å—Ç–æ–∫–∏–π –∏–ª–∏ —à–æ–∫–∏—Ä—É—é—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç.\n"
            "18. –ü—Ä–∏–∑—ã–≤—ã –≤—ã—Å—Ç—É–ø–∞—Ç—å –ø—Ä–æ—Ç–∏–≤ –∞–≤—Ç–æ—Ä–∞.\n"
            "19. –ù–µ–Ω—É–∂–Ω—ã–π —Ñ–ª—É–¥ –∏ –±–µ—Å—Å–º—ã—Å–ª–µ–Ω–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ.\n"
            "20. –®—É—Ç–∫–∏ –Ω–∞ —Ç–µ–º—É –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–∞.\n"
            "21. –û—Å–∫–æ—Ä–±–ª–µ–Ω–∏–µ —Ä–µ–ª–∏–≥–∏–æ–∑–Ω—ã—Ö —á—É–≤—Å—Ç–≤ –∏ –≤–µ—Ä–æ–∏—Å–ø–æ–≤–µ–¥–∞–Ω–∏–π.\n"
            "22. –†–∞–∑–º–µ—â–µ–Ω–∏–µ –ª–∏—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –∏—Ö —Å–æ–≥–ª–∞—Å–∏—è.\n"
            "23. –†–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –ª–æ–∂–Ω–æ–π –∏–ª–∏ –≤–≤–æ–¥—è—â–µ–π –≤ –∑–∞–±–ª—É–∂–¥–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.\n"
            "24. –°–æ–∑–¥–∞–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ —É—á–µ—Ç–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ–±—Ö–æ–¥–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫.\n"
            "25. –ü—É–±–ª–∏–∫–∞—Ü–∏—è –∏–ª–∏ –æ–±–º–µ–Ω –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏.\n\n"
            "üëë <b>–ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä</b> ‚Äî <a href=\"https://t.me/IUVB76I\">@IUVB76I</a>\n\n"
            "‚ö†Ô∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Å—Ç–∞–≤–ª—è–µ—Ç –∑–∞ —Å–æ–±–æ–π –ø—Ä–∞–≤–æ –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Ä–µ—à–µ–Ω–∏—è –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –Ω–∞ —Ä–∞–∑–Ω—ã–π —Å—Ä–æ–∫. "
            "–ú–µ—Ä—ã –Ω–∞–∫–∞–∑–∞–Ω–∏—è –º–æ–≥—É—Ç –≤–∞—Ä—å–∏—Ä–æ–≤–∞—Ç—å—Å—è, –∏ –≤–æ–∑–º–æ–∂–Ω–∞ —É—Å—Ç–Ω–∞—è –ø—Ä–æ—Å—å–±–∞ –æ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–µ –ø–æ–≤–µ–¥–µ–Ω–∏—è –≤ –ø–µ—Ä–≤—ã–π —Ä–∞–∑.",
            parse_mode=ParseMode.HTML
        )
        return

    # –°–ø–∞–º-—Ñ–∏–ª—å—Ç—Ä
    now = datetime.now()
    if user.id not in USER_MESSAGE_HISTORY:
        USER_MESSAGE_HISTORY[user.id] = []
    USER_MESSAGE_HISTORY[user.id] = [m for m in USER_MESSAGE_HISTORY[user.id] if (now - m["time"]).total_seconds() <= SPAM_TIME_SECONDS]
    USER_MESSAGE_HISTORY[user.id].append({"text": text_lower, "time": now})
    if len([m for m in USER_MESSAGE_HISTORY[user.id] if m["text"] == text_lower]) >= SPAM_LIMIT:
        if await can_restrict_member(message.chat.id, user.id):
            await mute_user(message.chat.id, user.id, timedelta(minutes=5), "–°–ø–∞–º", user.full_name)
            await message.delete()
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–∞—Ç, –ø–æ–ª–∏—Ç–∏–∫—É, –ø–æ–ø—Ä–æ—à–∞–π–Ω–∏—á–µ—Å—Ç–≤–æ, —Å—Å—ã–ª–∫–∏
    if RACIAL_SLURS_RE.search(text_lower) or PROHIBITED_WORDS_RE.search(text_lower):
        if await can_restrict_member(message.chat.id, user.id):
            await mute_user(message.chat.id, user.id, timedelta(minutes=10), "–ó–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞", user.full_name)
            await message.delete()
        return

    if MUT_WORDS_RE.search(text_lower):
        if await can_restrict_member(message.chat.id, user.id):
            await mute_user(message.chat.id, user.id, timedelta(minutes=10), "–ü–æ–ø—Ä–æ—à–∞–π–Ω–∏—á–µ—Å—Ç–≤–æ", user.full_name)
            await message.delete()
        return

    if URL_RE.search(text_lower):
        # –î–æ–ø—É—Å—Ç–∏–º —Å—Å—ã–ª–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ –Ω–∞ YouTube –∏ VK, –æ—Å—Ç–∞–ª—å–Ω—ã–µ —É–¥–∞–ª—è–µ–º –∏ –º—É—Ç–∏–º
        if await can_restrict_member(message.chat.id, user.id):
            await mute_user(message.chat.id, user.id, timedelta(minutes=10), "–ó–∞–ø—Ä–µ—â—ë–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞", user.full_name)
            await message.delete()
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "–º—É—Ç"
    if text_lower.startswith('–º—É—Ç'):
        if not message.reply_to_message:
            await message.reply("‚ö†Ô∏è –î–ª—è –∫–æ–º–∞–Ω–¥—ã –º—É—Ç –Ω—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            return

        args = text_lower.split()
        if len(args) < 3:
            await message.reply("‚ö†Ô∏è –§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã: –º—É—Ç <—á–∏—Å–ª–æ> <–µ–¥–∏–Ω–∏—Ü–∞ –≤—Ä–µ–º–µ–Ω–∏> <–ø—Ä–∏—á–∏–Ω–∞>")
            return

        duration_text = ' '.join(args[1:3])  # –ù–∞–ø—Ä–∏–º–µ—Ä, '1 —á–∞—Å'
        reason = ' '.join(args[3:]) if len(args) > 3 else "–ë–µ–∑ –ø—Ä–∏—á–∏–Ω—ã"

        duration = parse_duration(duration_text)
        if duration is None:
            await message.reply("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 10 –º–∏–Ω—É—Ç, 1 —á–∞—Å, 2 –¥–Ω—è")
            return

        target_user = message.reply_to_message.from_user
        if not await can_restrict_member(message.chat.id, target_user.id):
            await message.reply("‚ö†Ô∏è –ù–µ –º–æ–≥—É –∑–∞–º—É—Ç–∏—Ç—å –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            return

        await mute_user(message.chat.id, target_user.id, duration, reason, target_user.full_name)
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "—Ä–∞–∑–º—É—Ç"
    if text_lower.startswith('—Ä–∞–∑–º—É—Ç'):
        if not message.reply_to_message:
            await message.reply("‚ö†Ô∏è –î–ª—è –∫–æ–º–∞–Ω–¥—ã —Ä–∞–∑–º—É—Ç –Ω—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            return

        target_user = message.reply_to_message.from_user
        if not await can_restrict_member(message.chat.id, target_user.id):
            await message.reply("‚ö†Ô∏è –ù–µ –º–æ–≥—É —Ä–∞–∑–º—É—Ç–∏—Ç—å –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            return

        await unmute_user(message.chat.id, target_user.id, target_user.full_name)
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "–≤–∞—Ä–Ω"
    if text_lower.startswith('–≤–∞—Ä–Ω'):
        if not message.reply_to_message:
            await message.reply("‚ö†Ô∏è –î–ª—è –∫–æ–º–∞–Ω–¥—ã –≤–∞—Ä–Ω –Ω—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            return

        reason = text.partition(' ')[2].partition(' ')[2]
        if not reason:
            reason = "–ë–µ–∑ –ø—Ä–∏—á–∏–Ω—ã"

        target_user = message.reply_to_message.from_user
        await warn_user(message.chat.id, target_user.id, target_user.full_name, reason, message)
        return

@dp.message(Command("ban"))
async def cmd_ban(message: Message):
    if not message.reply_to_message:
        await message.reply("‚ö†Ô∏è –î–ª—è –∫–æ–º–∞–Ω–¥—ã /ban –Ω—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return
    
    target_user = message.reply_to_message.from_user
    if not await can_restrict_member(message.chat.id, target_user.id):
        await message.reply("‚ö†Ô∏è –ù–µ –º–æ–≥—É –∑–∞–±–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return
    
    try:
        await bot.ban_chat_member(message.chat.id, target_user.id)
        await message.reply(f"‚õî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {build_user_link(target_user.full_name, target_user.id)} –∑–∞–±–∞–Ω–µ–Ω.", parse_mode=ParseMode.HTML)
    except Exception as e:
        await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –±–∞–Ω–µ: {e}")

@dp.message(Command("unban"))
async def cmd_unban(message: Message):
    if not message.reply_to_message:
        await message.reply("‚ö†Ô∏è –î–ª—è –∫–æ–º–∞–Ω–¥—ã /unban –Ω—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return
    
    target_user = message.reply_to_message.from_user
    
    try:
        await bot.unban_chat_member(message.chat.id, target_user.id)
        await message.reply(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {build_user_link(target_user.full_name, target_user.id)} —Ä–∞–∑–±–∞–Ω–µ–Ω.", parse_mode=ParseMode.HTML)
    except Exception as e:
        await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–∞–Ω–µ: {e}")

@dp.message(Command("bot"))
async def cmd_bot(message: Message):
    await message.reply("ü§ñ –Ø ‚Äî –º–æ–¥–µ—Ä–∞—Ç–æ—Ä-–±–æ—Ç, –ø–æ–º–æ–≥–∞—é –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –ø–æ—Ä—è–¥–æ–∫ –≤ —á–∞—Ç–µ.")
if __name__ == "__main__":
    import asyncio
    asyncio.run(dp.start_polling(bot))